x.Resource <- c(0, 1, 1.5, 1.75, 2,2.25,2.5,2.75,3,3.5,5,6)
y.Efficiency <- c(1,1,0.95,0.9,0.85,0.75,0.65,0.5,0.35,0.2,0.1,0.1)
func.Grazing_pressure_death <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 1, yright = 0.1)
x.Resource <- c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.8)
y.Efficiency <- c(0, 0.05, 0.2, 0.65, 0.85, 1, 1, 1)
func.Water_pressure_death <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 0, yright = 1)
x.Resource <- c(0, 100, 280, 350, 400,600,800,1000)
y.Efficiency <- c(0, 0.2, 0.74, 1.2, 1.8, 3, 3.3, 3.6)
func.Rainfall_pasture <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 0, yright = 3.6)
x.Resource <- c(0, 1, 3, 5, 10)
y.Efficiency <- c(1, 0.9, 0.5, 0.4, 0.4)
func.Pasture_milk_goats <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 1, yright = 0.4)
x.Resource <- c(0, 1, 3, 5, 10)
y.Efficiency <- c(1, 0.9, 0.4, 0.2, 0.2)
func.Pasture_milk_cattle <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 1, yright = 0.2)
x.Resource <- c(0, 1, 3, 5, 10)
y.Efficiency <- c(1, 0.9, 0.67, 0.6, 0.6)
func.Pasture_milk_camels <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 1, yright = 0.6)
x.Resource <- c(0, 1, 10)
y.Efficiency <- c(0, 1, 1)
func.Budget_milk_consumption <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 5, yright = 1.0)
x.Resource <- c(0, 0.2, 0.4, 0.7, 0.9, 1, 2)
y.Efficiency <- c(5, 5, 4.5, 1.7, 1.1, 1, 1)
func.Lifespan_destocking <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 5, yright = 1.0)
x.Resource <- c(0, 0.6, 0.7, 0.8, 0.9, 1, 2)
y.Efficiency <- c(0, 0, 0.7, 0.85, 0.95, 1, 1)
func.Lifespan_purchasing <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 0, yright = 1.0)
x.Resource <- c(0, 0.33, 0.57, 0.84, 1, 1.3, 1.6, 2)
y.Efficiency <- c(0.5, 0.56, 0.66, 0.85, 1, 1.18, 1.28, 1.3)
func.Grain_attractiveness <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 0.5, yright = 1.3)
x.Resource <- c(0, 0.3, 0.6, 0.8, 1, 2)
y.Efficiency <- c(0.6, 0.65, 0.72, 0.83, 1, 1.2)
func.Cash_attractiveness <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 0.6, yright = 1.2)
x.Resource <- c(0, 0.4, 0.63, 0.82, 1, 1.3, 1.6, 2)
y.Efficiency <- c(0.1, 0.25, 0.45, 0.74, 1, 1.2, 1.3, 1.3)
func.Livestock_attractiveness <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 0.1, yright = 1.3)
x.Resource <- c(0, 0.1, 0.5, 0.75, 1, 2)
y.Efficiency <- c(1, 0.9, 0.25, 0.07, 0,0)
func.Displacement_tf <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 1, yright = 0)
x.Resource <- c(0, 1, 2, 2.5, 3, 3.5, 4,4.5,10)
y.Efficiency <- c(0.2, 0.6, 1.3, 2, 3.5, 4.5, 5, 5, 5)
func.Price_fodder <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 0.2, yright = 5)
x.Resource <- c(0, 0.1, 0.5, 0.75, 1, 2)
y.Efficiency <- c(1, 0.9, 0.25, 0.07, 0,0)
func.Returning_tf <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 1, yright = 0)
x.Resource <- recent_rains$time
y.Efficiency <- recent_rains$roll12
func.Trailing_rains <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 215, yright = 112)
x.Resource <- recent_rains$time
y.Efficiency <- recent_rains$value
func.Monthly_rain <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "constant",
yleft = 0.360, yright = 0.56)
x.Resource <- recent_rains$time
y.Efficiency <- recent_rains$norm6
func.Sixmonths_norm_rains <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 1.57, yright = 0.92)
length_sorghum <- length(recent_sorghum_price$time)
x.Resource <- recent_sorghum_price$time
y.Efficiency <- recent_sorghum_price$Price
func.Sorghum_price <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 10000, yright = recent_sorghum_price$Price[length_sorghum])
length_oil <- length(recent_oil_price$time)
x.Resource <- recent_oil_price$time
y.Efficiency <- recent_oil_price$Price
func.Oil_price <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 50000, yright = recent_oil_price$Price[length_oil])
length_sugar <- length(recent_sugar_price$time)
x.Resource <- recent_sugar_price$time
y.Efficiency <- recent_sugar_price$Price
func.Sugar_price <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = 30500, yright = recent_sugar_price$Price[length_sugar])
length_livestock <- length(full_livestockprice_df$time)
x.Resource <- full_livestockprice_df$time
y.Efficiency <- full_livestockprice_df$Price.y
func.Livestock_price <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "linear",
yleft = full_livestockprice_df$Price.y[1], yright = full_livestockprice_df$Price.y[length_livestock])
length_cash <- length(cash_intervention$time)
x.Resource <- cash_intervention$time
y.Efficiency <- cash_intervention$cash
func.Cash_intervention <- approxfun(x = x.Resource,
y = y.Efficiency,
method = "constant",
yleft = 0, yright = y.Efficiency[length_cash])
# Set the time period and step
START <- 0
FINISH <- time_length - 1
STEP <- 0.25
# Set the stocks and auxiliaries
simtime <- seq(START, FINISH, by = STEP)
stocks <- c(sLivestock = 1250000,
sPastoralists = 382000,
sMaximum_budget = 382000*200000,
sGrain = 382000*10,
sIDP = 20000,
sCash_idp = 100*20000,
sGrain_idp = 10*20000,
sCaloric_gap_grain = 0,
sCaloric_gap_sugar = 0,
sCaloric_gap_oil = 0,
sCaloric_gap_grain_idp = 0,
sCaloric_gap_sugar_idp = 0,
sCaloric_gap_oil_idp = 0)
auxs <- c(aInitial_cash = 200000,
aArea = 46620,
aSensitivity_pressure_death = 0.77,
aLifespan = 135.85,
aSensitivity_pressure_birth = 0.84,
aBirthrate = 0.061,
aSensitivity_waterpressure = 0.34,
aTLU_goats = 10.5,
aTLU_cattle = 1,
aTLU_camels = 0.7,
aAnnual_slaughter_rate = 0.0415,
aProduction_costs = 1000,
aPrice_fodder_initial = 10000*1000, # per Ton
aDaily_expenses_health_edu = 1.6,
aDM_per_TLU_year = 2.281,
aLivestock_price_initial = 11000*1000,
aMilk_price_initial = 15069,
aSugar_price_initial  = 20000,
aOil_price_initial  = 40000,
aRain_average = 175,
aFraction_idp_work = 0.3,
aDaily_labor_wage = 300,
aSomalia_birthrate = 0.00708,
aSomalia_deathrate = 0.001488095,
aSomalia_urbanrate = 0.003458,
aPastoralist_reference_dailycalories = 1900,
aIDP_reference_dailycalories = 2200,
aCaloric_value_grain = 3290,
aCaloric_value_sugar = 3870,
aCaloric_value_oil = 8100,
aMonthly_percapita_sugar_usage = 3.8,
aMonthly_percapita_oil_usage = 0.62,
aIndicated_min_level_displacement = 0.05,
aMin_circulation_rate = 0.0001,
aDisplacement_time = 2)
model <- function(time, stocks, auxs){
with(as.list(c(stocks, auxs)), {
aTrailing_rains <- func.Trailing_rains(time)
aMonthly_rains <- func.Monthly_rain(time)
aNormalized_sixmonths_rains <- func.Sixmonths_norm_rains(time)
aGrain_price <- func.Sorghum_price(time)
aOil_price <- func.Oil_price(time)
aSugar_price <- func.Sugar_price(time)
fCash_intervention <- func.Cash_intervention(time)*sPastoralists
aProductivity_pastureland <- min(func.Rainfall_pasture(aTrailing_rains), 4)*0.8
aIndicated_stock <- aProductivity_pastureland*aArea*100*0.52/aDM_per_TLU_year #100 is to convert area to Hectares
aRatio_stock <- sLivestock/aIndicated_stock
aPasture_pressure_lifespan <- aLifespan*((func.Grazing_pressure_death(aRatio_stock))^(aSensitivity_pressure_death))*((func.Water_pressure_death(aNormalized_sixmonths_rains))^(aSensitivity_waterpressure))
aPasture_pressure_birthrate <- aBirthrate*(func.Grazing_pressure_death(aRatio_stock))^(aSensitivity_pressure_birth)*((func.Water_pressure_death(aNormalized_sixmonths_rains))^(aSensitivity_waterpressure))
aPrice_fodder <- aPrice_fodder_initial*func.Price_fodder(aRatio_stock)
#aLivestock_price <- aLivestock_price_initial*(aTrailing_rains/aRain_average)^0.4
aLivestock_price <- func.Livestock_price(time)
aAverage_cash_pasto <- sMaximum_budget/sPastoralists
aAverage_cash_idp <- sCash_idp/sIDP
aAverage_livestock_pasto <- sLivestock/sPastoralists
# Milk production
aDaily_milk_prod_goats <- 0.5*func.Pasture_milk_goats(aRatio_stock)
aDaily_milk_prod_cattle <- 2.5*func.Pasture_milk_cattle(aRatio_stock)
aDaily_milk_prod_camels <- 3*func.Pasture_milk_camels(aRatio_stock) # 3 is the normal daily for camels
aMonthly_milk_prod_goats <- aDaily_milk_prod_goats*2.5*30/12
aMonthly_milk_prod_cattle <- aDaily_milk_prod_cattle*6*30/12
aMonthly_milk_prod_camels <- aDaily_milk_prod_camels*10*30/12 # 10 is the average number of months per year that a camel lactate
aGoats_lactating <- sLivestock*0.7*aTLU_goats*0.2 # 0.7 is share of shoats. 0.2 is fraction of herd lactating
aCattle_lactating <- sLivestock*0*aTLU_cattle*0.38
aCamels_lactating <- sLivestock*0.3*aTLU_camels*0.29
aMilk_produced <- aGoats_lactating*aMonthly_milk_prod_goats + aCattle_lactating*aMonthly_milk_prod_cattle + aCamels_lactating*aMonthly_milk_prod_camels
aDesired_grain_usage <- (9 + sCaloric_gap_grain*30)*sPastoralists #15 is per capita
aMonthly_expense_sugar <- (aMonthly_percapita_sugar_usage + sCaloric_gap_sugar*30)*aSugar_price
aMonthly_expense_oil <- (aMonthly_percapita_oil_usage + sCaloric_gap_oil*30)*aOil_price
aDaily_expenses_consume <- (aMonthly_expense_sugar + aMonthly_expense_oil)/30
aMonthly_consume_needs <- aDaily_expenses_consume*30*sPastoralists
aMonthly_health_edu_needs <- aDaily_expenses_health_edu*30*sPastoralists
aBudget_needs <- aDesired_grain_usage*aGrain_price + aMonthly_consume_needs
aFraction_over_budget_needs <- min(1,sMaximum_budget/(aDesired_grain_usage*aGrain_price + aMonthly_consume_needs))
aMonthly_grain_purchase <- aDesired_grain_usage*aFraction_over_budget_needs
aMonthly_expenditure_grain <- aMonthly_grain_purchase*aGrain_price
aMonthly_expenditure_consume <- aMonthly_consume_needs*aFraction_over_budget_needs
aMonthly_expenditure_health_edu <- min(aMonthly_health_edu_needs, sMaximum_budget - aMonthly_expenditure_grain - aMonthly_expenditure_consume)
aFeed_costs <- max(0, aDM_per_TLU_year*(1/12)*(1 - 1/aRatio_stock)*aPrice_fodder) # feed gap * price of fodder
aDesired_livestock_opi <- sLivestock*(aFeed_costs + aProduction_costs)
aActual_livestock_opi <- min(aDesired_livestock_opi, sMaximum_budget - aMonthly_expenditure_grain - aMonthly_expenditure_consume - aMonthly_expenditure_health_edu)
aRatio_livestock_opi <- aActual_livestock_opi/aDesired_livestock_opi
aAdjusted_lifespan <- aLifespan*aRatio_livestock_opi + aPasture_pressure_lifespan*(1 - aRatio_livestock_opi)
aAdjusted_birthrate <- aBirthrate*aRatio_livestock_opi + aPasture_pressure_birthrate*(1 - aRatio_livestock_opi)
fLivestock_deaths <- sLivestock/aAdjusted_lifespan
fLivestock_births <- sLivestock*aAdjusted_birthrate
# IDP expenses
aMonthly_expense_sugar_idp <- (aMonthly_percapita_sugar_usage + sCaloric_gap_sugar_idp*30)*aSugar_price
aMonthly_expense_oil_idp <- (aMonthly_percapita_oil_usage + sCaloric_gap_oil_idp*30)*aOil_price
aDaily_expenses_consume_idp <- (aMonthly_expense_sugar + aMonthly_expense_oil)/30
aDesired_grain_usage_idp <- (9 + sCaloric_gap_grain_idp*30)*sIDP #15 is per capita - 0.9 is fraction because IDP
aMonthly_consume_needs_idp <- aDaily_expenses_consume_idp*30*sIDP
aMonthly_health_edu_needs_idp <- aDaily_expenses_health_edu*30*sIDP
aFraction_over_budget_needs_idp <- min(1,sCash_idp/(aDesired_grain_usage_idp*aGrain_price + aMonthly_consume_needs_idp))
aMonthly_grain_purchase_idp <- aDesired_grain_usage_idp*aFraction_over_budget_needs_idp
aMonthly_expenditure_grain_idp <- aMonthly_grain_purchase_idp*aGrain_price
aMonthly_expenditure_consume_idp <- aMonthly_consume_needs_idp*aFraction_over_budget_needs
aMonthly_expenditure_health_edu_idp <- min(aMonthly_health_edu_needs_idp, sCash_idp - aMonthly_expenditure_grain_idp - aMonthly_expenditure_consume_idp)
aDesired_idp_livestock_opi <- sIDP*10000/8 # 1e5 is production cost per household, 8 is household size
aActual_idp_livestock_opi <- min(aDesired_idp_livestock_opi, sCash_idp - aMonthly_expenditure_grain_idp - aMonthly_expenditure_consume_idp - aMonthly_expenditure_health_edu_idp)
aIDP_cash_livestock_purchase <- 0.9*(aMonthly_expenditure_grain_idp + aMonthly_expenditure_consume_idp + aMonthly_expenditure_health_edu_idp + aActual_idp_livestock_opi)#0.9 is to hold 0.1 for cash reserve
# Milk income
aFraction_milk_sold <- 1 - 0.5*func.Budget_milk_consumption(aFraction_over_budget_needs)
aMilk_sold <- aFraction_milk_sold*aMilk_produced
aMilk_kept <- (1 - aFraction_milk_sold)*aMilk_produced
aMonthly_income_milk_sales <- aMilk_price_initial*aMilk_sold
# Income
aPastoralist_cash_livestock_purchase <- 0.9*(sMaximum_budget - aActual_livestock_opi - aMonthly_expenditure_grain - aMonthly_expenditure_consume - aMonthly_expenditure_health_edu) #0.9 is to hold 0.1 for cash reserve
aCash_livestock_purchase <- aIDP_cash_livestock_purchase + aPastoralist_cash_livestock_purchase
aFraction_LS_cash_pasto <- aPastoralist_cash_livestock_purchase/aCash_livestock_purchase
aLivestock_able_purchase <- aCash_livestock_purchase/aLivestock_price
aRatio_lifespan <- aAdjusted_lifespan/aLifespan
aDeathrate_desire_sell <- (func.Lifespan_destocking(aRatio_lifespan)^1.1)*0.01 #1.1 is the sensitivity to destocking, 0.01 is the fraction of herd willing to market every month
aDeathrate_desire_purchase <- (func.Lifespan_purchasing(aRatio_lifespan)^1)
aInternal_livestock_demand <- aDeathrate_desire_purchase*aLivestock_able_purchase
aInternal_livestock_supply <- aDeathrate_desire_sell*sLivestock
aDemand_supply_balance <- ifelse(aInternal_livestock_supply==0, 0, aInternal_livestock_demand/aInternal_livestock_supply)
aInternal_livestock_market_volume <- min(aInternal_livestock_demand, aInternal_livestock_supply)
aDesired_livestock_imports <- min(10^9, max(0, aInternal_livestock_demand - aInternal_livestock_supply)) # internal demand in excess of internal supply is made up by external supply - 10^9 is external supply limit, essentially infinite
aDesired_livestock_exports <- min(10^9, max(0, aInternal_livestock_supply - aInternal_livestock_demand)) # supply in excess of internal demands are exported up to external demand - 10^9 is external demand limit, essentially infinite, but maybe a covid adjustment necessary?
fLivestock_exports <- max(0, aDesired_livestock_exports*1) # 1 is fraction reaching market. Might be lower in case of a ban
fLivestock_imports <- max(0, aDesired_livestock_imports*0.95)
# Domestic slaughter
aMonthly_slaughter_rate <- (((1 + annual_slaughter_rate) / 1)^(1/12)-1)*aFraction_over_budget_needs
fLivestock_domestic_offtake <- min(sLivestock*aMonthly_slaughter_rate, sLivestock)
aMonthly_income_lifestock_sales <- fLivestock_exports*aLivestock_price*(1 - 0.5) # parenthesis is for the trade margin
aMonthly_expenditure_livestock <- fLivestock_imports*aLivestock_price*aFraction_LS_cash_pasto
aMonthly_expenditure_livestock_idp <- fLivestock_imports*aLivestock_price*(1-aFraction_LS_cash_pasto)
# Grains??
aAverage_grain_person <- sGrain/sPastoralists
fGrain_inflow <- aMonthly_grain_purchase
fGrain_usage <- aMonthly_grain_purchase*(1 - 0.05)
fGrain_usage_idp <- aMonthly_grain_purchase_idp*(1 - 0.05)
# Utility
aGrain_utility_pasto <- func.Grain_attractiveness(aAverage_grain_person/10)
aCash_utility_pasto <- func.Cash_attractiveness(aAverage_cash_pasto/400)
aLivestock_utility_pasto <- func.Livestock_attractiveness(aAverage_livestock_pasto/2.1)
aGrain_utility_idp <- func.Grain_attractiveness(10/10)
aCash_utility_idp <- func.Cash_attractiveness(aAverage_cash_idp/400)
aUtility_pasto <- aCash_utility_pasto*aLivestock_utility_pasto
aUtility_idp <- aCash_utility_idp
aIndicated_fraction_displaced <- (aIndicated_min_level_displacement*aUtility_idp)/(aIndicated_min_level_displacement*aUtility_idp + (1-aIndicated_min_level_displacement)*aUtility_pasto)
aInternal_population <- sIDP + sPastoralists
aFraction_displaced <- sIDP/aInternal_population
aIndicated_net_internal_displacement <- (aIndicated_fraction_displaced - aFraction_displaced)*aInternal_population
aMin_circulation <- aInternal_population*aFraction_displaced*(1 - aFraction_displaced)*aMin_circulation_rate
fDisplacement <- min(sPastoralists/aDisplacement_time,
max(0, aIndicated_net_internal_displacement)/aDisplacement_time)
fReturning <- min( sIDP/aDisplacement_time,
max(0, -aIndicated_net_internal_displacement)/aDisplacement_time )
aRel_attr_displacement <- func.Displacement_tf(aUtility_pasto/aUtility_idp)
#fDisplacement <- sPastoralists*aRel_attr_displacement
aRel_attr_returning <- func.Displacement_tf(aUtility_idp/aUtility_pasto)
#fReturning <- sIDP*aRel_attr_returning
# IDP
aIncome_idp <- sIDP*aFraction_idp_work*aDaily_labor_wage*30
aAssistance_idp <- sIDP*0 # Set assistance to IDPs
aAverage_grain_idp <- sGrain_idp/sIDP
# Nutrition - Pastoralists
aPastoralist_percapita_grain_consump <- aDesired_grain_usage/sPastoralists
aPastoralist_percapita_grain_dailycalories <- aPastoralist_percapita_grain_consump/30*aCaloric_value_grain #divide by 30 to get daily
aPastoralist_percapita_milk_consump <- aMilk_kept/sPastoralists
aPastoralist_percapita_milk_dailycalories <- aPastoralist_percapita_milk_consump/30*761.8
aPastoralist_percapita_meat_consump <- fLivestock_domestic_offtake*150/sPastoralists # 150 is kg meat per TLU
aPastoralist_percapita_meat_dailycalories <- aPastoralist_percapita_meat_consump/30*1500
aMonthly_caloric_gap_sugar <- sCaloric_gap_sugar*30
aPastoralist_percapita_sugar_consump <- aFraction_over_budget_needs*(3 + aMonthly_caloric_gap_sugar)
aPastoralist_percapita_sugar_dailycalories <- aPastoralist_percapita_sugar_consump/30*aCaloric_value_sugar
aMonthly_caloric_gap_oil <- sCaloric_gap_oil*30
aPastoralist_percapita_oil_consump <- aFraction_over_budget_needs*(0.6 + aMonthly_caloric_gap_oil)
aPastoralist_percapita_oil_dailycalories <- aPastoralist_percapita_sugar_consump/30*aCaloric_value_oil
aPastoralist_total_dailycalories <- aPastoralist_percapita_grain_dailycalories + aPastoralist_percapita_milk_dailycalories + aPastoralist_percapita_meat_dailycalories + aPastoralist_percapita_sugar_dailycalories + aPastoralist_percapita_oil_dailycalories
aPer_capita_daily_caloric_gap <- max(aPastoralist_reference_dailycalories - aPastoralist_total_dailycalories, -0.5*aPastoralist_reference_dailycalories)
aAdditional_calories_stablefood <- aPer_capita_daily_caloric_gap*0.61
aAdditional_calories_nonstablefood <- aPer_capita_daily_caloric_gap*0.39
# Nutrition - IDP
aIDP_percapita_grain_consump <- aDesired_grain_usage_idp/sIDP
aIDP_percapita_grain_dailycalories <- aIDP_percapita_grain_consump/30*aCaloric_value_grain #divide by 30 to get daily
aMonthly_caloric_gap_sugar_idp <- sCaloric_gap_sugar_idp*30
aIDP_percapita_sugar_consump <- aFraction_over_budget_needs_idp*(3 + aMonthly_caloric_gap_sugar_idp)
aIDP_percapita_sugar_dailycalories <- aIDP_percapita_sugar_consump/30*aCaloric_value_sugar
aMonthly_caloric_gap_oil_idp <- sCaloric_gap_oil_idp*30
aIDP_percapita_oil_consump <- aFraction_over_budget_needs_idp*(0.6 + aMonthly_caloric_gap_oil_idp)
aIDP_percapita_oil_dailycalories <- aIDP_percapita_sugar_consump/30*aCaloric_value_oil
aIDP_total_dailycalories <- aIDP_percapita_grain_dailycalories + aIDP_percapita_sugar_dailycalories + aIDP_percapita_oil_dailycalories
aPer_capita_daily_caloric_gap_idp <- max(aIDP_reference_dailycalories - aIDP_total_dailycalories, -0.5*aIDP_reference_dailycalories)
aAdditional_calories_stablefood_idp <- aPer_capita_daily_caloric_gap_idp*0.61
aAdditional_calories_nonstablefood_idp <- aPer_capita_daily_caloric_gap_idp*0.39
fTotal_income <- aMonthly_income_lifestock_sales + aMonthly_income_milk_sales # Should have additional income sources added
fTotal_expenses <- aMonthly_expenditure_grain + aMonthly_expenditure_consume + aMonthly_expenditure_health_edu + aMonthly_expenditure_livestock + aActual_livestock_opi
fUrban_pasto <- sPastoralists*aSomalia_urbanrate
fUrban_idp <- sIDP*aSomalia_urbanrate
dL_dt <- -fLivestock_deaths + fLivestock_births - fLivestock_exports + fLivestock_imports - fLivestock_domestic_offtake
dP_dt <- -fDisplacement + fReturning + (aSomalia_birthrate - aSomalia_deathrate)*sPastoralists - fUrban_pasto
dM_dt <- fTotal_income - fTotal_expenses - fDisplacement*aAverage_cash_pasto + fReturning*aAverage_cash_idp - fUrban_pasto*aAverage_cash_pasto + fCash_intervention
dG_dt <- fGrain_inflow - fGrain_usage - fDisplacement*aAverage_grain_person + fReturning*aAverage_grain_idp - fUrban_pasto*aAverage_grain_person
fTotal_income_idp <- aIncome_idp + aAssistance_idp
fTotal_expenses_idp <- min(sCash_idp, aMonthly_expenditure_grain_idp + aMonthly_expenditure_consume_idp + aMonthly_expenditure_health_edu_idp + aMonthly_expenditure_livestock_idp + aActual_idp_livestock_opi)
dI_dt <- fDisplacement - fReturning + (aSomalia_birthrate - aSomalia_deathrate)*sIDP - fUrban_idp
dC_dt <- fDisplacement*aAverage_cash_pasto - fReturning*aAverage_cash_idp + fTotal_income_idp - fTotal_expenses_idp - fUrban_idp*aAverage_cash_idp
dGidp_dt <- - fGrain_usage_idp + fDisplacement*aAverage_grain_person - fReturning*aAverage_grain_idp - fUrban_idp*aAverage_grain_idp
dSgrain_dt <- aAdditional_calories_stablefood/aCaloric_value_grain/0.5
dSsugar_dt <- 0.75*aAdditional_calories_nonstablefood/aCaloric_value_sugar/0.5
dSoil_dt <- 0.25*aAdditional_calories_nonstablefood/aCaloric_value_sugar/0.5
dSgrain_idp_dt <- aAdditional_calories_stablefood_idp/aCaloric_value_grain/0.5
dSsugar_idp_dt <- 0.75*aAdditional_calories_nonstablefood_idp/aCaloric_value_sugar/0.5
dSoil_idp_dt <- 0.25*aAdditional_calories_nonstablefood_idp/aCaloric_value_sugar/0.5
return(list(c(dL_dt, dP_dt, dM_dt, dG_dt, dI_dt, dC_dt, dGidp_dt, dSgrain_dt, dSsugar_dt, dSoil_dt, dSgrain_idp_dt, dSsugar_idp_dt, dSoil_idp_dt),
Feed_costs = aFeed_costs,
Fraction_over_budget_needs = aFraction_over_budget_needs,
Indicated_stock = aIndicated_stock,
Ratio_stock = aRatio_stock,
Livestock_price = aLivestock_price,
Monthly_income_livestock_sales = aMonthly_income_lifestock_sales,
Monthly_income_milk_sales = aMonthly_income_milk_sales,
Monthly_expenditure_grain  = aMonthly_expenditure_grain,
Monthly_expenditure_consume = aMonthly_expenditure_consume,
Monthly_expenditure_health_edu = aMonthly_expenditure_health_edu,
Monthly_expenditure_livestock = aMonthly_expenditure_livestock,
Desired_livestock_opi = aDesired_livestock_opi,
Actual_livestock_opi = aActual_livestock_opi,
Livestock_exports = fLivestock_exports,
Total_expenses = fTotal_expenses,
Internal_livestock_demand = aInternal_livestock_demand,
Internal_livestock_supply = aInternal_livestock_supply,
Utility_pasto = aUtility_pasto,
Utility_idp = aUtility_idp,
Livestock_utility_pasto = aLivestock_utility_pasto,
Budget_needs = aBudget_needs,
Rel_attr_displacement = aRel_attr_displacement,
Displacement = fDisplacement,
Trailing_rains = aTrailing_rains,
Monthly_rains = aMonthly_rains,
Total_caloric_intake =  aPastoralist_total_dailycalories,
Per_capita_daily_caloric_gap = aPer_capita_daily_caloric_gap,
Daily_expenses_consume = aDaily_expenses_consume,
Indicated_fraction_displaced = aIndicated_fraction_displaced,
Average_cash_pasto = aAverage_cash_pasto,
Cash_intervention = fCash_intervention,
Total_income = fTotal_income,
Total_expenses = fTotal_expenses))
})
}
nonNewModel <- data.frame(ode(y = stocks, times = simtime, func = model, parms = auxs, method = "euler"))
plot_a <- nonNewModel %>% ggplot() + geom_line(aes(time, Monthly_rains), color = "dodgerblue", size =1.5)+ geom_line(data=nonNewModel %>% filter(time>129),aes(time, Monthly_rains), color = "red", size =1.5) + scale_x_continuous(breaks = c(1:12)*12-12, labels = c(2012:2023))+ ylim(c(0,150)) + labs(subtitle = "Rainfall")
plot_b <- nonNewModel %>% ggplot() + geom_line(aes(time, sPastoralists), color = "blue", size =1.5)+ geom_line(data=nonNewModel %>% filter(time>129),aes(time, sPastoralists), color = "red", size =1.5) + scale_x_continuous(breaks = c(1:12)*12-12, labels = c(2012:2023))+ ylim(c(0,0.7e6)) + labs(subtitle = "Number of pastoralists")
plot_c <- nonNewModel %>% ggplot() + geom_line(aes(time, Indicated_stock), color = "green", size =1.5) + scale_x_continuous(breaks = c(1:12)*12-12, labels = c(2012:2023))+ ylim(c(0,1e6)) + labs(subtitle = "Livestock that pasture can support")
plot_d <- nonNewModel %>% ggplot() + geom_line(aes(time, sIDP), color = "orange", size =1.5)+ geom_line(data=nonNewModel %>% filter(time>129),aes(time, sIDP), color = "red", size =1.5) + scale_x_continuous(breaks = c(1:12)*12-12, labels = c(2012:2023))+ ylim(c(0,0.7e6)) + labs(subtitle = "Number of IDP")
plot_e <- nonNewModel %>% ggplot() + geom_line(aes(time, sLivestock), color = "forestgreen", size =1.5) + scale_x_continuous(breaks = c(1:12)*12-12, labels = c(2012:2023)) + ylim(c(0,3e6)) + labs(subtitle = "Livestock")
plot_f <- nonNewModel %>% mutate(floor_time = floor(time) + 0.5) %>% group_by(floor_time) %>% mutate(Displacement = sum(Displacement)) %>% ggplot() + geom_col(aes(time, Displacement), color = "black") + scale_x_continuous(breaks = c(1:12)*12-12, labels = c(2012:2023)) + labs(subtitle = "Displacement")
(plot_a + plot_b)/(plot_c + plot_d)/(plot_e + plot_f) + theme(panel.grid.minor = element_blank())
plot_b <- nonNewModel %>% filter(time>7*12) %>% ggplot() + geom_line(aes(time, sPastoralists), color = "blue", size =1.5)+ geom_line(data=nonNewModel %>% filter(time>132),aes(time, sPastoralists), color = "red", size =1.5) + scale_x_continuous(breaks = c(8:12)*12-11.5, labels = c(2019:2023))+ ylim(c(0,0.7e6)) + labs(subtitle = "Number of pastoralists") +theme(axis.title.y = element_blank())
plot_a <- nonNewModel %>% filter(time>7*12) %>% ggplot() + geom_line(aes(time, Monthly_rains), color = "dodgerblue", size =1.5)+ geom_line(data=nonNewModel %>% filter(time>132),aes(time, Monthly_rains), color = "red", size =1.5) + scale_x_continuous(breaks = c(8:12)*12-11.5, labels = c(2019:2023))+ ylim(c(0,150)) + labs(subtitle = "Rainfall") + theme(axis.title.y = element_blank())
plot_b <- nonNewModel %>% filter(time>7*12) %>% ggplot() + geom_line(aes(time, sPastoralists), color = "blue", size =1.5)+ geom_line(data=nonNewModel %>% filter(time>132),aes(time, sPastoralists), color = "red", size =1.5) + scale_x_continuous(breaks = c(8:12)*12-11.5, labels = c(2019:2023))+ ylim(c(0,0.7e6)) + labs(subtitle = "Number of pastoralists") +theme(axis.title.y = element_blank())
plot_c <- nonNewModel %>% filter(time>7*12) %>% ggplot() + geom_line(aes(time, Indicated_stock), color = "green", size =1.5) + scale_x_continuous(breaks = c(8:12)*12-11.5, labels = c(2019:2023)) + labs(subtitle = "Livestock that pasture can support") + theme(axis.title.y = element_blank())
plot_d <- nonNewModel %>% filter(time>7*12) %>% ggplot() + geom_line(aes(time, sIDP), color = "orange", size =1.5)+ geom_line(data=nonNewModel %>% filter(time>132),aes(time, sIDP), color = "red", size =1.5) + scale_x_continuous(breaks = c(8:12)*12-11.5, labels = c(2019:2023))+ ylim(c(0,0.25e6)) + labs(subtitle = "Number of IDP")+ theme(axis.title.y = element_blank())
plot_e <- nonNewModel %>% filter(time>7*12) %>% ggplot() + geom_line(aes(time, sLivestock), color = "forestgreen", size =1.5) + scale_x_continuous(breaks = c(1:12)*12-11.5, labels = c(2012:2023)) + ylim(c(0,1.5e6)) + labs(subtitle = "Livestock") + theme(axis.title.y = element_blank())
plot_f <- nonNewModel %>% mutate(floor_time = floor(time) + 0.5) %>% group_by(floor_time) %>% mutate(Displacement = sum(Displacement)) %>% filter(time>7*12) %>% ggplot() + geom_col(aes(time, Displacement), color = "black") + scale_x_continuous(breaks = c(8:12)*12-11.5, labels = c(2019:2023)) + labs(subtitle = "Displacement") + theme(axis.title.y = element_blank())
#(plot_a + plot_b)/(plot_c + plot_d)/(plot_e + plot_f) + theme(panel.grid.minor = element_blank())
(plot_a + labs(title = "Scenario: Rainfall average"))/(plot_c)/(plot_e)/( plot_f) + theme(panel.grid.minor = element_blank())
setwd("~/Sandbox/February2021/")
col_pop <- read.csv("query_data(43)/population.csv")
col_selected <- col_pop %>% mutate(OOC = ifelse(Year<2019, Others.of.concern, ifelse(Year==2019, 0, Others.of.concern-500000)),
UNHCR.EDP = Refugees.under.UNHCR.s.mandate+Asylum.seekers+OOC,
IDP = IDPs.of.concern.to.UNHCR,
DRC.TOT.DISP = UNHCR.EDP + IDP) %>% select(year=Year, UNHCR.EDP, IDP, DRC.TOT.DISP)
col_selected %<>% mutate(DRC.TOT.PREV = lag(DRC.TOT.DISP)) %>% filter(year>1990)
indicator_names2 <- tibble(Indicator.Code = c("DRC.TOT.DISP", "IDP", "UNHCR.EDP", "DRC.TOT.PREV"), Indicator.Name = c("Total forced displacement","Internally displaced persons","UNHCR total externally displaced persons", "Previous year's total displacement"))
col_displ <- left_join(col_selected %>% pivot_longer(cols = -year) %>% rename(Indicator.Code = name) %>% mutate(Country.Code = "COL", Country.Name = "Colombia"),
indicator_names2,
by = "Indicator.Code")
col_displ
col_displ %>% filter(year>2020)
6766002+200820
acled_22 <- read.csv("2022-01-01-2022-12-31.csv")
setwd("~/Sahel_data/")
acled_summed <- acled_22 %>% count(country, event_type)
gain <- read_csv("gain.csv")
head(gain)
head(acled_summed)
acled_summed$ISO3 <- countrycode(acled_summed$country, origin = "country.name", destination = "iso3c")
all_gain <- left_join(acled_summed, gain, by ="ISO3")
all_gain %>% filter(event_type=="Riots") %>% ggplot(aes(x=n, y=`2020`)) + geom_point()
all_gain %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
all_gain %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n, na.rm = T))
all_gain %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
all_gain %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
all_gain %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = n())
acled_summed <- acled_22 %>% count(country, event_type) %>% complete(country, event_type, fill = list(n=0))
acled_summed$ISO3 <- countrycode(acled_summed$country, origin = "country.name", destination = "iso3c")
all_gain %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
all_gain <- left_join(acled_summed, gain, by ="ISO3")
all_gain %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
dgain <- left_join(gain, acled_summed %>% filter(event_type=="Battles"), by = "ISO3")
dgain
cor(dgain$2020, dgain$n)
dgain %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
nrow(dgain)
dgain %>% count(event_type)
dgain <- left_join(gain, acled_summed, by = "ISO3")
nrow(dgain)
dgain <- left_join(gain, acled_summed, by = "ISO3") %>% replace_na(list(n=0))
dgain %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
dgain %>% count(event_type)
dgain %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
acled_22 %>% group_by(country) %>% summarise(fatal = sum(fatalities)) %>% arrange(desc(fatal))
acled_22 %>% group_by(country) %>% summarise(fatal = sum(fatalities)) %>% arrange(desc(fatal)) %>% print(n=100)
acled_22 %>% filter(event_type %in% c("Battles","Violence against civilians","Explosions/Remote violence")) %>% group_by(country) %>% summarise(fatal = sum(fatalities)) %>% arrange(desc(fatal)) %>% print(n=100)
acled_22 %>% filter(event_type %in% c("Battles","Violence against civilians","Explosions/Remote violence","Riots")) %>% group_by(country) %>% summarise(fatal = sum(fatalities)) %>% arrange(desc(fatal)) %>% print(n=100)
dgain %>% ggplot(aes(x=n, y=`2020`)) + geom_point()
dgain %>% ggplot(aes(x=n, y=`2020`)) + geom_point() + facet_wrap(.~event_type, ncol = 3)
dgain %>% filter(event_type!="Strategic developments", !is.na(event_type)) %>% ggplot(aes(x=n, y=`2020`)) + geom_point() + facet_wrap(.~event_type, ncol = 3)
high_acled <- acled_22 %>% filter(event_type %in% c("Battles","Violence against civilians","Explosions/Remote violence","Riots")) %>% group_by(country) %>% summarise(fatal = sum(fatalities)) %>%
filter(n>25)
high_acled <- acled_22 %>% filter(event_type %in% c("Battles","Violence against civilians","Explosions/Remote violence","Riots")) %>% group_by(country) %>% summarise(fatal = sum(fatalities)) %>%
filter(fatal>25)
dgain %>% filter(event_type!="Strategic developments", !is.na(event_type)) %>% ggplot(aes(x=n, y=`2020`, color = ISO3 %in% high_acled$ISO3)) + geom_point() + facet_wrap(.~event_type, ncol = 3)
dgain
dgain %>% mutate(high = ifelse(ISO3 %in% high_acled$ISO3, "Yes","No")) %>%
filter(event_type!="Strategic developments", !is.na(event_type)) %>% ggplot(aes(x=n, y=`2020`, color =high)) + geom_point() + facet_wrap(.~event_type, ncol = 3)
high_acled$ISO3 <- countrycode(high_acled$country, origin = "country.name", destination = "iso3c")
dgain %>% mutate(high = ifelse(ISO3 %in% high_acled$ISO3, "Yes","No")) %>%
filter(event_type!="Strategic developments", !is.na(event_type)) %>% ggplot(aes(x=n, y=`2020`, color =high)) + geom_point() + facet_wrap(.~event_type, ncol = 3)
dgain %>% mutate(high = ifelse(ISO3 %in% high_acled$ISO3, "Yes","No")) %>%
filter(event_type!="Strategic developments", !is.na(event_type)) %>% ggplot(aes(x=n, y=`2020`, color =high)) + geom_point() +
facet_wrap(.~event_type, ncol = 3, scales = "free_x")
dgain %>% mutate(high = ifelse(ISO3 %in% high_acled$ISO3, "Yes","No")) %>%
filter(event_type!="Strategic developments", !is.na(event_type)) %>% ggplot(aes(x=n, y=`2020`, color =high)) + geom_point() +
facet_wrap(.~event_type, ncol = 3, scales = "free_x") + ylab("ND-GAIN Index") + xlab("Number of events") +
scale_color_manual(name = "High fatality country", values = c("gold","dodgerblue"))
ggsave("nd_gain.png",device = "png", dpi = 500, width = 7, height = 5, units = "in")
dgain %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
dgain %>% mutate(high = ifelse(ISO3 %in% high_acled$ISO3, "Yes","No")) %>% filter(!is.na(`2020`)) %>% group_by(event_type, high) %>% summarise(cor = cor(`2020`, n))
vuln <- read_csv("vulnerability.csv")
dvuln <- left_join(vuln, acled_summed, by = "ISO3") %>% replace_na(list(n=0))
dvuln %>% mutate(high = ifelse(ISO3 %in% high_acled$ISO3, "Yes","No")) %>% filter(!is.na(`2020`)) %>% group_by(event_type, high) %>% summarise(cor = cor(`2020`, n))
vuln
dvuln  %>% filter(!is.na(`2020`)) %>% group_by(event_type) %>% summarise(cor = cor(`2020`, n))
dvuln %>% mutate(high = ifelse(ISO3 %in% high_acled$ISO3, "Yes","No")) %>%
filter(event_type!="Strategic developments", !is.na(event_type)) %>% ggplot(aes(x=n, y=`2020`, color =high)) + geom_point() +
facet_wrap(.~event_type, ncol = 3, scales = "free_x") + ylab("ND-GAIN Index") + xlab("Number of events") +
scale_color_manual(name = "High fatality country", values = c("gold","dodgerblue"))
# Change to location of saved data
setwd("~/Sahel_data/")
setwd("~/Sahel_data/wacafi_project/")
# Change to location of saved data
setwd("~/Sahel_data/wacafi_project/scripts/")
setwd("~/wacafi_project/")
setwd("~/wacafi_project/data/")
bfa_df <- read.csv("bfa_idp_data.csv")
